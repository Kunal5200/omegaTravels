import { authControllers } from "@/api/auth";
import loginBg from "@/banner/login-bg.svg";
import { loginDetails } from "@/redux/reducers/userInfo";
import { isEmail } from "@/utils/regex";
import { loginValidation } from "@/utils/validation";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import {
  Alert,
  Box,
  Button,
  Divider,
  FormControl,
  Grid,
  IconButton,
  Snackbar,
  TextField,
  Typography,
} from "@mui/material";
import { jwtDecode } from "jwt-decode";
import { Raleway, Roboto_Condensed } from "next/font/google";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useState } from "react";
import Loading from "react-loading";
import { useDispatch } from "react-redux";
const raleway = Raleway({
  weight: "500",
  subsets: ["latin"],
});
const roboto = Roboto_Condensed({
  weight: "600",
  subsets: ["latin"],
});
export default function Home() {
  const [showPassword, setShowPassword] = useState(false);
  const showPasswordHandler = () => {
    setShowPassword(!showPassword);
  };

  const dispatch = useDispatch();

  const [state, setState] = useState({
    email: "",
    password: "",
  });
  const [error, setError] = useState({
    email: "",
    password: "",
  });

  const inputHandler = (e) => {
    const { id, value } = e.target;
    setState({ ...state, [id]: value });
    setError({
      ...error,
      [id]:
        id === "email"
          ? isEmail(value)
            ? ""
            : "Please Enter Valid Email"
          : "",
    });
  };
  const router = useRouter();

  const [open, setOpen] = useState(false);
  const [message, setMessage] = useState("");
  const [validation, setValidation] = useState(false);
  const [loading, setLoading] = useState(false);
  const submitHandler = (e) => {
    e.preventDefault();
    if (loginValidation({ value: state, setError, error, setValidation })) {
      setLoading(true);
      let body = {
        email: state.email,
        password: state.password,
      };
      authControllers
        .loginUser(body)
        .then((res) => {
          // console.log(res);
          const decoded = jwtDecode(res.data.data.accessToken);
          dispatch(loginDetails({ ...decoded }));
          
          setLoading(false);
          setOpen(true);
          setMessage(res.data.message);
          localStorage.setItem("accessToken", res.data.data.accessToken);
          router.push("/dashboard");
        })
        .catch((err) => {
          let errMessage =
            (err.response && err.response.data.message) ||
            err.message ||
            "Something Went Wrong";
          setOpen(true);
          setValidation(false);
          setMessage(errMessage);
          setLoading(false);
        });
    } else {
      setOpen(true);
      setMessage("Please Enter Valid Details");
    }
  };

  return (
    <>
      <Head>
        <title>Login Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box>
        <Grid container alignItems={"center"}>
          <Grid
            item
            lg={8}
            sx={{
              backgroundColor: "#d7d7d7",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <Image src={loginBg} width={620} height={640} />
          </Grid>
          <Grid lg={4} p={4}>
            <Typography
              className={roboto.className}
              fontSize={30}
              lineHeight={1}
            >
              Welcome to Omega
            </Typography>
            <Typography className={raleway.className} fontSize={12}>
              Your Dashboard
            </Typography>
            <Divider sx={{ mt: 4 }}>
              <Typography
                className={roboto.className}
                color="#00000069"
                fontSize={13}
              >
                Sign In with
              </Typography>
            </Divider>
            <form onSubmit={submitHandler}>
              <FormControl sx={{ mt: 4 }} fullWidth>
                <TextField
                  label="Email"
                  sx={{
                    "& ": {
                      ".MuiOutlinedInput-input": {
                        padding: "14px",
                      },
                      label: {
                        top: 2,
                        fontSize: 12,
                      },
                    },
                    fontSize: 12,
                  }}
                  type="email"
                  id="email"
                  onChange={inputHandler}
                  error={Boolean(error.email)}
                  helperText={error.email}
                />
                <TextField
                  label="Password"
                  sx={{
                    "& ": {
                      ".MuiOutlinedInput-input": {
                        padding: "14px",
                      },
                      label: {
                        top: 2,
                        fontSize: 12,
                      },
                    },
                    fontSize: 12,
                    mt: 4,
                  }}
                  id="password"
                  onChange={inputHandler}
                  type={showPassword ? "text" : "password"}
                  InputProps={{
                    endAdornment: (
                      <IconButton onClick={showPasswordHandler}>
                        {showPassword ? (
                          <VisibilityOff fontSize="small" />
                        ) : (
                          <Visibility fontSize="small" />
                        )}
                      </IconButton>
                    ),
                  }}
                  error={Boolean(error.password)}
                  helperText={error.password}
                />
                <Box sx={{ textAlign: "end", mt: 1 }}>
                  <Button
                    className={raleway.className}
                    sx={{ width: 170, fontSize: 12 }}
                  >
                    Forgot Password ?
                  </Button>
                </Box>
                <Box sx={{ mt: 4 }}>
                  <Button
                    fullWidth
                    sx={{
                      padding: "10px",
                      textTransform: "none",
                      backgroundColor: "#000",
                      color: "#fff",
                      ":hover": {
                        backgroundColor: "#000000",
                        color: "#fff",
                      },
                    }}
                    type="submit"
                    className={raleway.className}
                    disabled={loading}
                  >
                    {loading ? (
                      <Loading
                        type="bars"
                        color="#ffffff"
                        width={20}
                        height={20}
                      />
                    ) : (
                      "SignIn"
                    )}
                  </Button>
                </Box>
                <Snackbar
                  open={open}
                  autoHideDuration={2000}
                  onClose={() => setOpen(false)}
                  anchorOrigin={{ vertical: "top", horizontal: "right" }}
                >
                  <Alert
                    severity={validation ? "success" : "error"}
                    onClose={() => setOpen(false)}
                    variant="filled"
                  >
                    {message}
                  </Alert>
                </Snackbar>
              </FormControl>
            </form>
          </Grid>
        </Grid>
      </Box>
    </>
  );
}
